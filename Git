 Git : Distributed version control and collaboration.
 	   Some example of version control system are:
 	   		1. bitkeeper ( old )
 	   		2. gitlab
 	   		3. github 
 	   		4. git and many more
 
 		1. Version Control
 		2. Collaboration
 		
 		- Every New update will be store as a new file.
 		- Can be back and for to its version.
 		- Track record of update can be shown easily.
 		- Easy to collaborate with multiple people in single project
 		
 		# Different Types Of: Version Control System
 		--------------------------------------------
 		
 		1. Local Version Control
 			- We can create a local database to store all the version. 
	 		- But we can not be able to collaborate with other. 
	 		: to solve this issue, we have the system called CVCS ( Centralized Version Control System )
 		
 		2. Centralized Version Control System (CVCS)
 		
 			layer : Server -> Repository -> ( update and commit ) -> working copy ( separately for each developer )
 		
 		# Advantage of (CVSC): 
 		----------------------
 			Every one have access to it. Group will know that on which topic we are working. 
 			Makes easy to communicate.
 			
 		# Disadvantage of (CVSC):
 		-------------------------
 			File gone a replace by on commit
 			
 			
 		3.Distributed Version Control System (DVCS):
 		--------------------------------------------
 			layer : Server > Repository > local repository > working copy
 		
 		** Open Source Project : Anyone can contribute to the project.
 		
 		# History:
 		----------
 			Early days: Archive files or Sending the patches are mostly used
 			linux was using the gitkeeper. linux is free community open source. when gitkeeper start charging then they move to git.
 			In this way the git was born.
 			
 			Advantage of git:
 			1. Simple to use
 			2. Fast
 			3. Branching
 			4. Fully distributed Which make the git so famous.
 			
 		
	Can be work with GUI or CUI.
	* CUI = more control flow and more recommended to work with.
	
	NOTE: Working directory > after adding goes to > Staging area(index) > after commit goes to > Commit history(objects) 
	
	************************************ Intalling Git ( working directory and local branch .git ) *********************************
	NOTE: # = command line, don't put the # in the command 
	
	- to know the git is installed or not
		# git --version
		
		[ Note: In mac (Xcode) git is already installed. Windows: we have to install ]
		
		# git download > select the right version for your os > download
		
		* move with all the default configuration or you can change it according to your own.
		
		- After installing, we have to make the user who will gone a work together
		# git config
		
		- user name have to mentioned
		- Email Must have to config to git
		
		- to get all the variable 
		# git config --global --list
			- show you all the detail of your account. username, email, repository
			
		- if you don't have git account, configure it with below command
		# git config --global user.name "name"
		# git config --global user.email "email"
		
		- conform the same command
		# git config --global --list
		- show user.nama, user.email
		
		
		- [ working directory(git don't know of working directory) > commit(goes to staging area) > staging area(git work and take care of file) ]
		- Think as every time, we commit = we create one version of that file or code
		
		// to know the status of git 
		# git status
			-fatal: not a git repository (or any of the parent directories): .git
				- meaning git does not have repository yet
				
				
		// we have to create a git Local repository ( meaning we have to initialize the git )
		// below command create the empty Git repository folder is hidden but all the staging will be done here
		# git init
			
			- show the file path of git repository.
			- Remember that all the created file will be the part of project(working directory) but not part of .git
		
		// check the git status
		# git status
		
		NOTE: we want to have the " On branch main " , Not a " On branch master "
		To do that we have to remove the git
		# rm -rf .git
		or( go to directory > select the folder .git > shift + delete)
		# git init 
			- by default give the master directory
		
		// to get main
		# git init -b main   // -b = branch
		
		// check git status
	# git status
		 
	************************************ After Intalling Git Adding Folder *********************************
	
	- create the file
		
	// add the file to .git
	# git add <file name> 
		- add the file to .git and not commited it ( added to staging area )
		- Think commit = save file to .git
	// check git status
	# git status
		- look for the instruction, we will find the "Changes to be commited:"
	
	// to remove from staging area
	# git rm --cached <file name>
		
	// to know all the commit history
	# git log
	
	Note: when to commit and how much often have to commit, depend on the project and company instruction
	Must have to add the comment to commit to know which and what file is committed to who as well.
	If the company have the issue ticket system, then have to mentions that ticket number as well
	- commit will be abort, if we don't pass the message
	
	// to commit
	# git commit

	// to put message
	# git commit -m "message"
		- look instruction.
	// check status
	# git status
	
	NOTE: git provide some unique number called checksum to trach the change in the file.
		 checksum is like finger print.
	example: [main (root-commit) 3305bc2], the last unique number ((Behind it have 40 character)First 7 digit hexadecimal number)
	
	- checksum is done with SHA-1
	
	// check the log history
	# git log
		- show all the commit history
		
	Note: After saving the file, it becomes the modified file and if we notice to the file name we get M in VS code.
		- after staging, this M will be gone.
		
	// direct commit (meaning skipping the staging part = git add <file name>)
	# git commit -a -m "comment"
		- Working directory > commit history(objects)
		[ make sure to save the file ]
		
	******************************** Git Diff command *********************************
	
	- after saving the file, git show the file has been modified
	# git status
	
	// to know the difference has been made while in the working directory
	# git diff
		- show the difference of previous version and present version of file
		
	// finding diff after adding to staging area
	# git diff --staged
	
	[ NOTE: Readme.md  where md = markdown, used for proper documentation ]
	
	// adding all file to staging area
	# git add .
		or we have do one by one 
	// to commit all the file
	# git commit -m "comment"
	
	NOTE: to delete from commit ( don't delete from the working directory )
	Because if you do push to git then, every one can see it. 
	Before doing push, delete it from commit
		git rm --cached <filename>
		
		-after removing from the git, then delete from the working repository
		
	*************************** Remote Repository *************************************
	Q: What is a Remote Repository?
	A: Server repository which can be access by multiple people.
	
	1. github = mostly used by normal people ( can be used by anyone )
	2. gitlab = mostly used by private or corporation for more security reason ( can be used by anyone )
	3. Bitbucket = have good feature
		
	// To clone the github repository with https
	# git clone <https-address>	
		- to cancel the downloading use ( control + c )
		- to remove the repository use ( rm -rf repository )
		
	***************************** Creating Github Account *****************************
	
	-signup
	-email
	-fill the form and follow the steps
	
	- to create the repository > click + button > new repository > fill the form 
		- Readme file = detail of project
		
	  // make directory for the project or file which you are working on 
	  # mkdir git-course
	  
	  // move to created directory 
	  # cd git-course/
	  
	  // For now we will do one by one here 
	  // to create file and put some message
	  # echo "This is git-course demo file" >> Readme.md	//( echo "Message" >> filename.extension ) 
	  	- create Readme.md file and put the message in it.
	  
	  // to see the content of file
	  # cat filename.extention
	  
	  // we have created file and read it 
	  // still we don't have the git connection 
	  // to initiate the git 
	  # git init 
	  	- create the empty git repository
	  
	  // check the folder and conform
	  # ls
	  	- show the file and may be not show the file 
	  
	  // to show all file 
	  # ls -a 
	  	- show show all file and hidden
	  	
	  // stage the file 
	  #  git add filename
	  
	  // commit the file 
	  # git commit -m "comment"
	  
	  // check the status
	  # git  status
	  
	  // create the branch ( because we get the default branch as master branch
	  # git branch -M main
	  	- create the branch called main
	  	
	  Note: we are still in the local repository
	  so, we need to create the remote repository
	  
	  Q: How we will connect to the remote repository?
	  A: we will need the SSH and https 
	  	SSH = once we log in it detect the id, who we are. [ ssg-keygen -o ] 
	  			- which generate the key pair for public and private
	  	https = we have to log in every time while push
	  	
	  	
	  // got generate the ssh keygen
	  # ssh-keygen -o
	  	- Generating public/private ed25519 key pair. 
	  	
	  // we can put the file name, where to go
	  // for default hit enter
	  - i will go with enter
	  	
	  // ask you for passphrase 
	  // i will go with default ( so hit enter )
	  // hit enter for default until 	like  below:
	  
	  The key's randomart image is:
			+--[ED25519 256]--+
			|     .o.         |
			| ....=.. .       |
			|  o*=o+ o .      |
			| oo.X=   o       |
			|Eo.Oo=  S        |
			|oo& *            |
			|o* * .           |
			|+++              |
			|OB.              |
			+----[SHA243]-----+
			
	// After getting this, the file has been created successfully
	
	// to find the file, we have created
	// look for all the file after going back to file 
	# cd
	# ls
	# ls -a		// for all the file to show
	
	// look for the .ssh file, which we have created
		- like .ssh
		
	// go to folder
	# cd .ssh
	
	// look for the .pub extention file and open it using the cat command
	# cat filename with extension
		- show all the ssh code
	
	// Q: Where do i use this key? How to use it ?
	   A: copy the key and paste it to github 
	   Steps: ( remote repository ) > profile > setting > Look for the SSH and GPG keys  > click on new SSH key > give title > Paste to key section > click on add sshkay
	  	
	// after adding sshkey , we will get the gmail and 
	// now we have to local repository and remote repository is connected
	// meaning every time we push, then it conform it, from which client it is coming
	
	// after that go to the folder that we are working on 
	// using the ls and cd command
	// verify the folder and project file that we are working
	 
	// now we will use the command
	git remote add origin git@github.com:desicodergto/git-course.git
		- git remote and remote to connect
	- we have done to connect or map the local and remote repository
	
	// At this point, the remote is empty and we have to move the local file to remote
	# git push -u origin main ( -u = upstrim , origin main = branch name, push = meaning pushing data to remote repository main branch )
	
	// get promt to conform the right key or not with yes/no question
	- after conforming the key, write yes and enter
	
	// How do we verify ? 
	- Refresh the github page.
	
	// to see the origin
	# git remote -v
		- show the origin
		
	// ************* about tag **************************8
	- Every program have the version number
	- if we go to about of the program, we can find the commit detail of program
	
	- Tag = version number which we give to the program
	
	// to show all the tag given to program or file 
	# git tag
	
	// there are two way to give the tag 
	1. Lightweight Tagging
	2. Annotated Tagging = full detail to the user and program like ( who will use, who is commit it, etc) 
	In this case use Annotated Tagging. Except this use Lightweight Tagging
	
	// to put tag 
	# git tag -a v1.0 -m "First Release"
	
	// after release we have to put tag 
	
	// then have to push the tag 
	# git push origin v1.0 ( git push branch version )
		- also give the zar.file, when we click it, it start downloading
		
	
	****************************** Think that you have to work on some other project *********************
	// case senario of company
	
	// we are going to take the vscode for example. we will take the vscode from the github.
	- search the vscode > copy the https or ssh url
	# git clone url
		- wait until download
	
	// open the folder in your favorite code editor
	- i will take tour with vscode in vscode
	# git tag show versionnumber
	# git tag
	# git log --pretty=oneline  // show the all commit in one line
	
	// edit the file > save
	// go to particular file path
	Hint: git status show the modified file path and copy it 
	// add the file ( git add file path ) 
	// commit the file ( git commit -m "comment"
	Hint: look the remote first to determine the branch
	// git push branch main
	
	Note: using the https always ask you for userid and password
		  if you don't want to use the useid or password use the ssh url
		  - you just need to login once
		  
		  
	// to remove the folder forcefullu
	# rm -rf directoryName
	
	
	*************************** git Branch ******************************
	
	
	
	  // create one any file by following the below command
	  echo "# git-course" >> README.md
		git init
		git add README.md
		git commit -m "first commit"
		git branch -M main
		git remote add origin git@github.com:desicodergto/git-course.git
		git push -u origin main
		
		
	// To push an existing repository from the command line
		git remote add origin git@github.com:desicodergto/git-course.git
		git branch -M main
		git push -u origin main
		
	
		
	
			  
	   
		 